# -*- coding: utf-8 -*-
"""probability-bigram.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GWYsYayAW-x4GCfk0BHSPKgYT2B6z11U
"""

from collections import defaultdict
import math

def calculate_bigrams(corpus):
    words = corpus.split()
    bigram_counts = defaultdict(int)
    unigram_counts = defaultdict(int)

    for i in range(len(words) - 1):
        unigram_counts[words[i]] += 1
        bigram_counts[(words[i], words[i + 1])] += 1
    unigram_counts[words[-1]] += 1

    return bigram_counts, unigram_counts

def calculate_bigram_probability(sentence, bigram_counts, unigram_counts, smoothing=1):
    words = sentence.split()
    probability = 1.0
    vocab_size = len(unigram_counts)

    for i in range(len(words) - 1):
        bigram = (words[i], words[i + 1])
        bigram_count = bigram_counts[bigram] + smoothing
        unigram_count = unigram_counts[words[i]] + smoothing * vocab_size
        probability *= bigram_count / unigram_count

    return probability

# Example
corpus = "time flies like an arrow fruit flies like a banana"
sentence = "time flies like a banana"

bigram_counts, unigram_counts = calculate_bigrams(corpus)
sentence_probability = calculate_bigram_probability(sentence, bigram_counts, unigram_counts)

print("Bigram Counts:", dict(bigram_counts))
print("Unigram Counts:", dict(unigram_counts))
print("Probability of the sentence:", sentence_probability)